'use server';
/**
 * @fileOverview AI-Powered Vulnerability Detection flow.
 *
 * This file defines a Genkit flow that leverages AI to scan smart contract code
 * for potential vulnerabilities. It takes smart contract code as input and
 * returns a detailed report of identified vulnerabilities, their severity,
 * and recommendations for remediation.
 *
 * @interface AiPoweredVulnerabilityDetectionInput - Defines the input schema for the flow.
 * @interface AiPoweredVulnerabilityDetectionOutput - Defines the output schema for the flow.
 * @function aiPoweredVulnerabilityDetection - The main function to trigger the vulnerability detection flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

/**
 * @interface AiPoweredVulnerabilityDetectionInput
 * @description Defines the input schema for the AI-powered vulnerability detection flow.
 * @property {string} smartContractCode - The smart contract code to be scanned. MUST be valid code.
 * @property {string} blockchainType - The blockchain type of the smart contract (e.g., ETH, SOL, ETC).
 */
const AiPoweredVulnerabilityDetectionInputSchema = z.object({
  smartContractCode: z.string().describe('The smart contract code to be scanned.'),
  blockchainType: z.string().describe('The blockchain type of the smart contract (e.g., ETH, SOL, ETC).'),
});
export type AiPoweredVulnerabilityDetectionInput = z.infer<typeof AiPoweredVulnerabilityDetectionInputSchema>;

const VulnerabilitySchema = z.object({
    title: z.string().describe('The title of the vulnerability.'),
    severity: z.enum(['High', 'Medium', 'Low', 'Unknown']).describe('The severity of the vulnerability.'),
    description: z.string().describe('A detailed description of the vulnerability, formatted using markdown bullet points.'),
    location: z.string().describe('The location of the vulnerability in the code, e.g., "Lines 10-15".'),
    recommendation: z.string().describe('Actionable recommendations for remediation, formatted using markdown bullet points.'),
});


/**
 * @interface AiPoweredVulnerabilityDetectionOutput
 * @description Defines the output schema for the AI-powered vulnerability detection flow.
 * @property {string} vulnerabilityReport - A detailed report of identified vulnerabilities, their potential impact, and actionable recommendations for remediation.
 */
const AiPoweredVulnerabilityDetectionOutputSchema = z.object({
  vulnerabilities: z.array(VulnerabilitySchema).describe('A list of identified vulnerabilities.'),
});
export type AiPoweredVulnerabilityDetectionOutput = z.infer<typeof AiPoweredVulnerabilityDetectionOutputSchema>;

/**
 * aiPoweredVulnerabilityDetection
 * @description An async function that takes smart contract code as input, calls the aiPoweredVulnerabilityDetectionFlow to generate a vulnerability report, and returns the report.
 * @param {AiPoweredVulnerabilityDetectionInput} input - The input for the vulnerability detection flow, including the smart contract code and blockchain type.
 * @returns {Promise<AiPoweredVulnerabilityDetectionOutput>} - A promise that resolves to the vulnerability report.
 */
export async function aiPoweredVulnerabilityDetection(input: AiPoweredVulnerabilityDetectionInput): Promise<AiPoweredVulnerabilityDetectionOutput> {
  return aiPoweredVulnerabilityDetectionFlow(input);
}

const aiPoweredVulnerabilityDetectionPrompt = ai.definePrompt({
  name: 'aiPoweredVulnerabilityDetectionPrompt',
  input: {schema: AiPoweredVulnerabilityDetectionInputSchema},
  output: {schema: AiPoweredVulnerabilityDetectionOutputSchema},
  prompt: `You are a smart contract security expert. Your task is to analyze the given smart contract code for potential vulnerabilities and generate a structured list of findings in JSON format.

For each vulnerability you find, provide the following details:
- title: A concise name for the vulnerability (e.g., "Reentrancy").
- severity: The severity level, which must be one of 'High', 'Medium', 'Low', or 'Unknown'.
- description: A detailed description of the vulnerability. Use markdown bullet points.
- location: The specific line or lines where the vulnerability is located (e.g., "Lines 42-50").
- recommendation: Actionable steps to fix the vulnerability. Use markdown bullet points.

If no vulnerabilities are found, return an empty array for the 'vulnerabilities' field.

Smart Contract Code:
\`\`\`
{{{smartContractCode}}}
\`\`\`

Blockchain Type: {{{blockchainType}}}`,
});

const aiPoweredVulnerabilityDetectionFlow = ai.defineFlow(
  {
    name: 'aiPoweredVulnerabilityDetectionFlow',
    inputSchema: AiPoweredVulnerabilityDetectionInputSchema,
    outputSchema: AiPoweredVulnerabilityDetectionOutputSchema,
  },
  async input => {
    const {output} = await aiPoweredVulnerabilityDetectionPrompt(input);
    return output!;
  }
);
