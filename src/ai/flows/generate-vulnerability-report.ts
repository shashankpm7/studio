// src/ai/flows/generate-vulnerability-report.ts
'use server';

/**
 * @fileOverview Generates a detailed vulnerability report for a smart contract.
 *
 * - generateVulnerabilityReport - A function that generates a vulnerability report for a given smart contract and its identified vulnerabilities.
 * - GenerateVulnerabilityReportInput - The input type for the generateVulnerabilityReport function.
 * - GenerateVulnerabilityReportOutput - The return type for the generateVulnerabilityReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateVulnerabilityReportInputSchema = z.object({
  contractCode: z
    .string()
    .describe('The smart contract code to analyze.'),
  vulnerabilities: z.array(z.string()).describe('A list of identified vulnerabilities in the contract.'),
  blockchain: z.enum(['ETH', 'SOL', 'ETC']).describe('The blockchain platform of the smart contract.'),
});

export type GenerateVulnerabilityReportInput = z.infer<typeof GenerateVulnerabilityReportInputSchema>;

const GenerateVulnerabilityReportOutputSchema = z.object({
  report: z.string().describe('A detailed report of the vulnerabilities found in the smart contract, including explanations of the risks and actionable steps to fix them.'),
});

export type GenerateVulnerabilityReportOutput = z.infer<typeof GenerateVulnerabilityReportOutputSchema>;

export async function generateVulnerabilityReport(input: GenerateVulnerabilityReportInput): Promise<GenerateVulnerabilityReportOutput> {
  return generateVulnerabilityReportFlow(input);
}

const generateVulnerabilityReportPrompt = ai.definePrompt({
  name: 'generateVulnerabilityReportPrompt',
  input: {schema: GenerateVulnerabilityReportInputSchema},
  output: {schema: GenerateVulnerabilityReportOutputSchema},
  prompt: `You are a smart contract security expert. Generate a detailed report of the vulnerabilities found in the following smart contract. Provide explanations of the risks associated with each vulnerability and actionable steps to fix them. The report should be comprehensive and easy to understand for developers.

Smart Contract Code:
{{contractCode}}

Identified Vulnerabilities:
{{#each vulnerabilities}}
- {{this}}
{{/each}}

Blockchain: {{blockchain}}`,
});

const generateVulnerabilityReportFlow = ai.defineFlow(
  {
    name: 'generateVulnerabilityReportFlow',
    inputSchema: GenerateVulnerabilityReportInputSchema,
    outputSchema: GenerateVulnerabilityReportOutputSchema,
  },
  async input => {
    const {output} = await generateVulnerabilityReportPrompt(input);
    return output!;
  }
);
